"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Switch } from "@/components/ui/switch"
import { Link2, Unlink, Settings, CheckCircle, AlertCircle } from "lucide-react"

const socialAccounts = [
  {
    id: "youtube",
    name: "YouTube",
    icon: "üé•",
    connected: true,
    username: "@stroymaterials",
    followers: "12.5K",
    status: "active",
    lastSync: "2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥",
  },
  {
    id: "instagram",
    name: "Instagram",
    icon: "üì∏",
    connected: true,
    username: "@stroymaterials_ru",
    followers: "8.9K",
    status: "active",
    lastSync: "1 —á–∞—Å –Ω–∞–∑–∞–¥",
  },
  {
    id: "vk",
    name: "–í–ö–æ–Ω—Ç–∞–∫—Ç–µ",
    icon: "üîµ",
    connected: true,
    username: "stroymaterials",
    followers: "15.2K",
    status: "active",
    lastSync: "30 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥",
  },
  {
    id: "telegram",
    name: "Telegram",
    icon: "‚úàÔ∏è",
    connected: true,
    username: "@stroymaterials_channel",
    followers: "3.4K",
    status: "active",
    lastSync: "5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥",
  },
  {
    id: "tiktok",
    name: "TikTok",
    icon: "üéµ",
    connected: false,
    username: "",
    followers: "",
    status: "disconnected",
    lastSync: "",
  },
  {
    id: "facebook",
    name: "Facebook",
    icon: "üìò",
    connected: false,
    username: "",
    followers: "",
    status: "disconnected",
    lastSync: "",
  },
]

export function ConnectedAccounts() {
  const [accounts, setAccounts] = useState(socialAccounts)

  const handleConnect = (accountId: string) => {
    setAccounts((prev) =>
      prev.map((account) =>
        account.id === accountId ? { ...account, connected: true, status: "active", lastSync: "–¢–æ–ª—å–∫–æ —á—Ç–æ" } : account,
      ),
    )
  }

  const handleDisconnect = (accountId: string) => {
    setAccounts((prev) =>
      prev.map((account) =>
        account.id === accountId ? { ...account, connected: false, status: "disconnected", lastSync: "" } : account,
      ),
    )
  }

  const connectedCount = accounts.filter((account) => account.connected).length

  return (
    <div className="space-y-6">
      {/* Overview */}
      <Card>
        <CardHeader>
          <CardTitle>–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã</CardTitle>
          <CardDescription>
            –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏ –∫ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º —Å–µ—Ç—è–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-between p-4 bg-muted rounded-lg">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-accent rounded-full flex items-center justify-center">
                <Link2 className="h-5 w-5 text-accent-foreground" />
              </div>
              <div>
                <p className="font-medium">–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {connectedCount}</p>
                <p className="text-sm text-muted-foreground">–ò–∑ {accounts.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º</p>
              </div>
            </div>
            <Badge variant="default">{Math.round((connectedCount / accounts.length) * 100)}% –ø–æ–∫—Ä—ã—Ç–∏–µ</Badge>
          </div>
        </CardContent>
      </Card>

      {/* Social Accounts List */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {accounts.map((account) => (
          <Card key={account.id} className={account.connected ? "border-green-200" : "border-border"}>
            <CardContent className="p-6">
              <div className="flex items-start justify-between mb-4">
                <div className="flex items-center space-x-3">
                  <div className="text-2xl">{account.icon}</div>
                  <div>
                    <h3 className="font-semibold">{account.name}</h3>
                    {account.connected && <p className="text-sm text-muted-foreground">{account.username}</p>}
                  </div>
                </div>
                <div className="flex items-center space-x-2">
                  {account.connected ? (
                    <CheckCircle className="h-5 w-5 text-green-500" />
                  ) : (
                    <AlertCircle className="h-5 w-5 text-muted-foreground" />
                  )}
                </div>
              </div>

              {account.connected ? (
                <div className="space-y-3">
                  <div className="flex justify-between text-sm">
                    <span className="text-muted-foreground">–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:</span>
                    <span className="font-medium">{account.followers}</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span className="text-muted-foreground">–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:</span>
                    <span className="font-medium">{account.lastSync}</span>
                  </div>
                  <div className="flex space-x-2">
                    <Button variant="outline" size="sm" className="flex-1 bg-transparent">
                      <Settings className="h-4 w-4 mr-2" />
                      –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                    </Button>
                    <Button variant="destructive" size="sm" onClick={() => handleDisconnect(account.id)}>
                      <Unlink className="h-4 w-4 mr-2" />
                      –û—Ç–∫–ª—é—á–∏—Ç—å
                    </Button>
                  </div>
                </div>
              ) : (
                <div className="space-y-3">
                  <p className="text-sm text-muted-foreground">
                    –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                  </p>
                  <Button onClick={() => handleConnect(account.id)} className="w-full">
                    <Link2 className="h-4 w-4 mr-2" />
                    –ü–æ–¥–∫–ª—é—á–∏—Ç—å
                  </Button>
                </div>
              )}
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Publishing Settings */}
      <Card>
        <CardHeader>
          <CardTitle>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</CardTitle>
          <CardDescription>–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center justify-between">
            <div className="space-y-0.5">
              <label className="text-sm font-medium">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è</label>
              <p className="text-xs text-muted-foreground">–ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è</p>
            </div>
            <Switch defaultChecked />
          </div>

          <div className="flex items-center justify-between">
            <div className="space-y-0.5">
              <label className="text-sm font-medium">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</label>
              <p className="text-xs text-muted-foreground">–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</p>
            </div>
            <Switch defaultChecked />
          </div>

          <div className="flex items-center justify-between">
            <div className="space-y-0.5">
              <label className="text-sm font-medium">–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫</label>
              <p className="text-xs text-muted-foreground">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–π —á–∞—Å</p>
            </div>
            <Switch defaultChecked />
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
